package org.jboss.set.gradle.versionmanipulation.internal;

import org.gradle.api.Action;
import org.gradle.api.XmlProvider;
import org.jboss.set.gradle.versionmanipulation.PluginLogger;
import org.jboss.set.gradle.versionmanipulation.configuration.AlignmentConfiguration;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 * Overrides data in pom generated by the old 'maven' plugin.
 */
public class PomTransformer implements Action<XmlProvider> {

    private static final String VERSION = "version";
    private static final String DEPENDENCIES = "dependencies";
    private static final String DEPENDENCY = "dependency";
    private static final String GROUPID = "groupId";
    private static final String ARTIFACTID = "artifactId";
    private static final String SCOPE = "scope";
    private static final String DEFAULT_SCOPE = "compile";

    private AlignmentConfiguration alignmentConfiguration;

    public PomTransformer(AlignmentConfiguration alignmentConfiguration) {
        this.alignmentConfiguration = alignmentConfiguration;
    }

    @Override
    public void execute(XmlProvider xmlProvider) {
//        transformProjectVersion(xmlProvider);
        transformDependencies(xmlProvider);

        // this would do similar thing on a model level
        /*project.getTasks().withType(Upload.class).all(new Action<Upload>() {
            @Override
            public void execute(Upload upload) {
                System.out.println("found task " + upload.getName());
                upload.getRepositories().withType(MavenResolver.class).all(new Action<MavenResolver>() {
                    @Override
                    public void execute(MavenResolver installer) {
                        System.out.println("found installer " + installer.getName());

                        installer.getPom().whenConfigured(new Action<MavenPom>() {
                            @Override
                            public void execute(MavenPom mavenPom) {
                                System.out.println("found pom " + mavenPom);
                                mavenPom.setVersion(mavenPom.getVersion() + "-th-1");
                                mavenPom.getDependencies().forEach(dependency -> {
                                    try {
                                        // didn't find the way to access Dependency class from the plugin, I think it's
                                        // because it's a 'shaded' dependency of gradle
                                        Method getter = dependency.getClass().getMethod("getVersion");
                                        Object origVersion = getter.invoke(dependency);
                                        Method setter = dependency.getClass().getMethod("setVersion", String.class);
                                        setter.invoke(dependency, origVersion.toString() + "-redhat-1");
                                    } catch (Exception e) {
                                        PluginLogger.ROOT_LOGGER.error("Couldn't rewrite dependency version in POM generated by 'maven' plugin.", e);
                                    }
                                });
                            }
                        });
                    }
                });
            }
        });*/
    }

    /**
     * @deprecated This breaks maven-publish plugin, which validates publication identity before publishing.
     */
    @Deprecated
    private void transformProjectVersion(XmlProvider xmlProvider) {
        NodeList childNodes = xmlProvider.asElement().getChildNodes();
        for (int i = 0; i < childNodes.getLength(); i++) {
            Node child = childNodes.item(i);
            if (child.getNodeType() == Node.ELEMENT_NODE
                    && VERSION.equals(child.getNodeName())) {
                child.setTextContent(alignmentConfiguration.getProjectVersion());
                return;
            }
        }
        PluginLogger.ROOT_LOGGER.errorf("Project <version> tag not found when transforming Maven POM.");
    }

    private void transformDependencies(XmlProvider xmlProvider) {
        // find <dependencies> child
        Node dependenciesNode = null;
        NodeList childNodes = xmlProvider.asElement().getChildNodes();
        for (int i = 0; i < childNodes.getLength(); i++) {
            Node child = childNodes.item(i);
            if (child.getNodeType() == Node.ELEMENT_NODE
                    && DEPENDENCIES.equals(child.getNodeName())) {
                dependenciesNode = child;
                break;
            }
        }

        if (dependenciesNode == null) {
            PluginLogger.ROOT_LOGGER.errorf("Project <dependencies> tag not found when transforming Maven POM.");
            return;
        }

        // go through dependencies
        NodeList dependencyNodes = ((Element) dependenciesNode).getElementsByTagName(DEPENDENCY);
        for (int i = 0; i < dependencyNodes.getLength(); i++) {
            Node dependencyNode = dependencyNodes.item(i);

            // collect GAV
            String group = null;
            String name = null;
            String version = null;
            String scope = DEFAULT_SCOPE;
            Node versionNode = null;
            for (int j = 0; j < dependencyNode.getChildNodes().getLength(); j++) {
                Node child = dependencyNode.getChildNodes().item(j);
                if (child.getNodeType() == Node.ELEMENT_NODE) {
                    switch (child.getNodeName()) {
                        case GROUPID:
                            group = child.getTextContent();
                            break;
                        case ARTIFACTID:
                            name = child.getTextContent();
                            break;
                        case VERSION:
                            version = child.getTextContent();
                            versionNode = child;
                            break;
                        case SCOPE:
                            scope = child.getTextContent();
                            break;
                    }
                }
            }
            if (group == null || name == null || version == null) {
                PluginLogger.ROOT_LOGGER.errorf(new Exception(), "Incomplete GAV was collected for dependency %s:%s:%s",
                        group, name, version);
                continue;
            }

            // modify version
            String newVersion = alignmentConfiguration.getDependencyVersion(group, name, scope);
            if (newVersion != null) {
                PluginLogger.ROOT_LOGGER.infof("Overriding version of %s:%s:%s to %s",
                        group, name, version, newVersion);
                versionNode.setTextContent(newVersion);
            }
        }
    }
}
