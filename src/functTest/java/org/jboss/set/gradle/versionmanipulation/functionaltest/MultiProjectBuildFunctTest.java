package org.jboss.set.gradle.versionmanipulation.functionaltest;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.Arrays;

import org.apache.maven.model.Dependency;
import org.apache.maven.model.Model;
import org.apache.maven.model.io.xpp3.MavenXpp3Reader;
import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
import org.gradle.testkit.runner.BuildResult;
import org.gradle.testkit.runner.GradleRunner;
import org.gradle.testkit.runner.TaskOutcome;
import org.jboss.set.gradle.versionmanipulation.action.PublishingRepositoryConfigurer;
import org.jboss.set.gradle.versionmanipulation.functionaltest.utils.TestUtils;
import org.jboss.set.gradle.versionmanipulation.task.GenerateAlignmentPomTask;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;

public class MultiProjectBuildFunctTest {

    @Rule
    public TemporaryFolder tempDir = new TemporaryFolder();
    private File rootProjectDir;
    private File subprojectDir;

    @Before
    public void setup() throws IOException, URISyntaxException {
        tempDir.create();
        rootProjectDir = tempDir.newFolder("testproject");
        subprojectDir = tempDir.newFolder("testproject", "subproject");
        System.out.println(String.format("Preparing project in %s", rootProjectDir.getPath()));

        TestUtils.copyResourceToDirectory("multi-project/build.gradle", rootProjectDir);
        TestUtils.copyResourceToDirectory("multi-project/settings.gradle", rootProjectDir);
        TestUtils.copyResourceToDirectory("multi-project/libraries.gradle", rootProjectDir);
//        TestUtils.copyResourceToDirectory("single-project/HelloWorld.java", new File(subprojectDir, "src/main/java/"));

        System.setProperty(PublishingRepositoryConfigurer.URL_SYSTEM_PROPERTY, "http://localhost/testurl");
    }

    @After
    public void tearDown() {
        System.clearProperty(PublishingRepositoryConfigurer.URL_SYSTEM_PROPERTY);
    }

    @Test
    public void testGeneratePom() throws IOException, XmlPullParserException {
        File parentPomFile = new File(rootProjectDir, "pom.xml");
        File subprojectPomFile = new File(subprojectDir, "pom.xml");
        Assert.assertFalse(parentPomFile.exists());
        Assert.assertFalse(subprojectPomFile.exists());

        String[] arguments = {GenerateAlignmentPomTask.NAME, "--info", "--stacktrace"/*, "-I", "init.gradle"*/};
        System.out.println(String.format("Building with arguments %s", Arrays.toString(arguments)));
        BuildResult result = GradleRunner.create()
                .withProjectDir(rootProjectDir)
                .withArguments(arguments)
                .withPluginClasspath()
                .forwardOutput()
                .build();

        // build task should be successful
        result.getTasks().forEach(buildTask -> System.out.println(buildTask.getPath() + ": " + buildTask.getOutcome()));
        Assert.assertEquals(TaskOutcome.SUCCESS, result.task(":" + GenerateAlignmentPomTask.NAME).getOutcome());

        Assert.assertTrue(parentPomFile.exists());
        checkGeneratedParentPomXml(parentPomFile);

        Assert.assertTrue(subprojectPomFile.exists());
        checkGeneratedSubprojectPomXml(subprojectPomFile);
    }


    /**
     * Checks parent project pom.xml file generated by {@link GenerateAlignmentPomTask}.
     *
     * (Should contain the same version as build.gradle.)
     */
    private void checkGeneratedParentPomXml(File pomFile) throws IOException, XmlPullParserException {
        MavenXpp3Reader reader = new MavenXpp3Reader();
        Model pom = reader.read(new FileInputStream(pomFile));

        Assert.assertEquals("1.0-SNAPSHOT", pom.getVersion());
        Assert.assertEquals("org.jboss.set.gradle", pom.getGroupId());
        Assert.assertEquals("testproject", pom.getArtifactId());
        Assert.assertEquals("pom", pom.getPackaging());

        // no deps
        Assert.assertEquals(0, pom.getDependencies().size());
    }

    /**
     * Checks sub-project pom.xml file generated by {@link GenerateAlignmentPomTask}.
     *
     * (Should contain the same version as build.gradle.)
     */
    private void checkGeneratedSubprojectPomXml(File pomFile) throws IOException, XmlPullParserException {
        MavenXpp3Reader reader = new MavenXpp3Reader();
        Model pom = reader.read(new FileInputStream(pomFile));

        // check project version
        Assert.assertNull(pom.getVersion());
        Assert.assertEquals("org.jboss.set.gradle", pom.getGroupId());
        Assert.assertEquals("subproject", pom.getArtifactId());
        Assert.assertEquals("pom", pom.getPackaging());

        // parent reference
        Assert.assertNotNull(pom.getParent());
        Assert.assertEquals("org.jboss.set.gradle", pom.getParent().getGroupId());
        Assert.assertEquals("testproject", pom.getParent().getArtifactId());
        Assert.assertEquals("1.0-SNAPSHOT", pom.getParent().getVersion());
        Assert.assertEquals("..", pom.getParent().getRelativePath());

        // check dependency version
        Assert.assertEquals(1, pom.getDependencies().size());
        Dependency dependency = pom.getDependencies().get(0);
        Assert.assertEquals("jboss-logging", dependency.getArtifactId());
        Assert.assertEquals("3.3.1.Final", dependency.getVersion());
    }
}
