package org.jboss.set.gradle4.versionmanipulation.functionaltest;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Properties;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import org.apache.maven.model.Dependency;
import org.apache.maven.model.Model;
import org.apache.maven.model.io.xpp3.MavenXpp3Reader;
import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
import org.gradle.testkit.runner.BuildResult;
import org.gradle.testkit.runner.GradleRunner;
import org.gradle.testkit.runner.TaskOutcome;
import org.jboss.set.gradle4.versionmanipulation.functionaltest.utils.TestUtils;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;

@SuppressWarnings("ConstantConditions")
public class ProjectBuildFunctTest {

    @Rule
    public TemporaryFolder tempDir = new TemporaryFolder();
    private File projectDir;

    @Before
    public void setup() throws IOException, URISyntaxException {
        tempDir.create();
        projectDir = tempDir.newFolder("testproject");

        System.out.println(projectDir.getPath());

        URL buildFile = getClass().getClassLoader().getResource("build.gradle");
        URL librariesFile = getClass().getClassLoader().getResource("libraries.gradle");
        URL initFile = getClass().getClassLoader().getResource("init.gradle");
        URL propertyFile = getClass().getClassLoader().getResource("overrideVersions.properties");
        URL javaFile = getClass().getClassLoader().getResource("HelloWorld.java");

        TestUtils.copyFileToFolder(buildFile, projectDir);
        TestUtils.copyFileToFolder(librariesFile, projectDir);
        TestUtils.copyFileToFolder(initFile, projectDir);
        TestUtils.copyFileToFolder(propertyFile, projectDir);
        TestUtils.copyFile(javaFile, new File(projectDir, "src/main/java/HelloWorld.java"));
    }


    @Test
    public void test() throws IOException, XmlPullParserException {
        BuildResult result = GradleRunner.create()
                .withProjectDir(projectDir)
                .withArguments("build", "install", "-I", "init.gradle")
                .withPluginClasspath()
                .build();

        // build task should be successful
        result.getTasks().forEach(buildTask -> System.out.println(buildTask.getPath() + ": " + buildTask.getOutcome()));
        Assert.assertEquals(TaskOutcome.SUCCESS, result.task(":build").getOutcome());

        // verify implementation version in manifest
        File manifest = new File(projectDir, "build/tmp/jar/MANIFEST.MF");
        Assert.assertTrue(manifest.exists());
        Properties manifestProps = new Properties();
        manifestProps.load(new FileReader(manifest));
        Assert.assertEquals("1.0.1-redhat-1", manifestProps.getProperty("Implementation-Version"));
        Assert.assertEquals("1.0.1.redhat-1", manifestProps.getProperty("Bundle-Version"));

        // check pom.xml generated by "maven-publish" plugin
        checkPomXml(new File(projectDir, "build/publications/maven/pom-default.xml"));

        // check pom.xml generated by "maven" plugin
        checkPomXml(new File(projectDir, "build/poms/pom-default.xml"));

        // check jar file exists
        File jarFile = new File(projectDir, "build/libs/testproject-1.0.1-redhat-1.jar");
        Assert.assertTrue(jarFile.exists());

        // check that pom.xml is included in the jar
        ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(jarFile));
        ZipEntry pomEntry = null;
        while (zipInputStream.available() != 0) {
            ZipEntry entry = zipInputStream.getNextEntry();
            System.out.println(entry == null ? null : entry.getName());
            if (entry != null && "META-INF/maven/pom.xml".equals(entry.getName())) {
                pomEntry = entry;
            }
        }
        Assert.assertNotNull(pomEntry);
    }

    /**
     * Verifies that project and dependency versions were overridden.
     * @param pomFile pom.xml file
     */
    private void checkPomXml(File pomFile) throws IOException, XmlPullParserException {
        MavenXpp3Reader reader = new MavenXpp3Reader();
        Model pom = reader.read(new FileReader(pomFile));
        Assert.assertEquals("1.0.1-redhat-1", pom.getVersion());
        Dependency dependency = pom.getDependencies().get(0);
        Assert.assertEquals("jboss-logging", dependency.getArtifactId());
        Assert.assertEquals("3.3.1.Final-redhat-1", dependency.getVersion());
    }
}
